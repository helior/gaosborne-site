<?php

/********************************************************************
 * Drupal Hooks
 *******************************************************************/

/**
 * Implementation of hook_menu().
 */
function os_product_menu() {
  $items = array();
  $items['osborne/autocomplete'] = array(
    'title' => 'GA Osborne autocomplete',
    'page callback' => 'os_product_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function os_product_menu_alter(&$items) {
  // @todo can we actually unset these without error in form submit?
  // unset($items['search']['file']);
  // unset($items['search/node/%menu_tail']['file']);
  $items['search']['page callback'] = 'os_product_search_view';
  $items['search/node/%menu_tail']['page callback'] = 'os_product_search_view'; 
  // krumo($items);
}


/**
 * Implementation of hook_block().
 */
function os_product_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['product-navigation-expanded']['info'] = t('Product Navigation (Expanded)');
      return $blocks;
      break;
    
    case 'view':
      switch ($delta) {
        case 'product-navigation-expanded':
          $block['content'] = theme('os_product_navigation_expanded');
          break;
      }
      return $block;
      break;
  }
}


/**
 * Implementation of hook_theme().
 */
function os_product_theme($existing, $type, $theme, $path) {
  $hooks = array();
  if (function_exists('themepacket_discover')) {
    $hooks += themepacket_discover($existing, $type, $theme, $path);
  }
  return $hooks;
}


/**
 * Implementation of hook_preprocess_page().
 */
function os_product_preprocess_page(&$vars) {
  global $theme;
  if ($theme != 'osborne') return;
  
  $vars['store_navigation'] = theme('os_product_navigation_dropdown');
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * @see search_block_form().
 */
function os_product_form_search_block_form_alter(&$form, &$form_state) {
  unset($form['search_block_form']['#title']);
  $form['search_block_form']['#attributes']['title'] = t('Search...');
  $form['search_block_form']['#autocomplete_path'] = 'osborne/autocomplete';
  $form['#theme'] = 'os_product_search_form';
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 * @see comment_form().
 */
function os_product_form_comment_form_alter(&$form, &$form_state) {
  unset($form['homepage']);
  unset($form['mail']);
  unset($form['name']['#default_value']);
  $form['comment_filter']['comment']['#title'] = t('Your review');
  $form['comment_filter']['comment']['#resizable'] = FALSE;
  $form['comment_filter']['comment']['#rows'] = 5;
  unset($form['comment_filter']['format']);
  $form['submit']['#value'] = t('Submit Review');
  unset($form['preview']);
  
  $form['#prefix'] = l(t('Add Review'), 'comment/reply/' . $form['nid']['#value'], array('attributes' => array('id' => 'add-review')));
}

/**
 * Implementation of hook_link_alter().
 */
function os_product_link_alter(&$links, $node, $comment = NULL) {
  if ($comment) {
    unset($links['comment_reply']);
  }
}

/******************************************************************************
 * Page Callbacks
 *****************************************************************************/
/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.
 */
function os_product_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT title FROM {node} WHERE LOWER(title) LIKE LOWER('%s%%') AND type = 'product'", $string, 0, 10);
    while ($node = db_fetch_object($result)) {
      $matches[$node->title] = check_plain($node->title);
    }
  }

  drupal_json($matches);
}

/**
 * Stripped down version of original search result page.
 * @see search_view().
 */
function os_product_search_view($type = 'node') {
  if (!isset($_POST['form_id'])) {
    $keys = search_get_keys();
    $results = '';
    if (trim($keys)) {
      watchdog('search', '%keys (@type).', array('%keys' => $keys, '@type' => module_invoke($type, 'search', 'name')), WATCHDOG_NOTICE, l(t('results'), 'search/'. $type .'/'. $keys));
      $results = search_data($keys, $type);
      if (!$results) {
        $results = theme('box', t('Your search yielded no results'), search_help('search#noresults', drupal_help_arg()));
      }
    }

    return $results;
  }

  return drupal_get_form('search_form', NULL, empty($keys) ? '' : $keys, $type);

}

/******************************************************************************
 * Custom Functions
 *****************************************************************************/

function _os_product_product_navigation() {
  // @todo cache this.
  $vid = 1; // Store vocabulary @todo put into settings page
  $build = array();
  foreach (taxonomy_get_tree($vid, 0, -1, 1) as $term) {
    _os_product_build_taxonomy_item_list($vid, $term, $build);
  }
  return $build;
}

function _os_product_build_taxonomy_item_list($vid, $term, &$build) {
  $build[$term->tid]['data'] = l($term->name, 'taxonomy/term/' . $term->tid);
  foreach (taxonomy_get_tree($vid, $term->tid, -1, 1) as $child) {
    _os_product_build_taxonomy_item_list($vid, $child, $build[$term->tid]['children']);
  }
}

function _os_product_build_taxonomy_add_images(&$build, $preset) {
  foreach ($build as $tid => $term) {
    $path = _osborne_helper_get_taxonomy_image_path($tid);
    $image = $path ? theme('imagecache', $preset, $path) : '';
    $build[$tid]['data'] .= '<span class="hidden image">' . $image . '</span>';
    if (isset($build[$tid]['children'])) {
      _os_product_build_taxonomy_add_images($build[$tid]['children'], $preset);
    }
  }
}

function _os_product_build_taxonomy_add_flag(&$build) {
  foreach ($build as $tid => $term) {
    $build[$tid]['data'] = '<span class="flag"></span>' . $build[$tid]['data'];
    if (isset($build[$tid]['children'])) {
      _os_product_build_taxonomy_add_flag($build[$tid]['children'], $preset);
    }
  }
}

/**
 * Helper query function to collect the nid, title, body, and filepath of the
 * product image for "related product" node reference field. This saves us from
 * running node_load() multiple times on a product page.
 * 
 * @param $items
 *   The node reference field array.
 * @return
 *   An array of node data.
 */
function _os_product_query_related_items($items) {
  foreach ($items as $item) {
    if ($item['nid']) {
      $nids[] = $item['nid'];
    }
  }
  
  if ($nids) {
    $results = db_query('SELECT n.nid, n.title, n.body, f.filepath
      FROM {node_revisions} n
      JOIN {content_field_product_image} c ON c.nid = n.nid
      JOIN {files} f on c.field_product_image_fid = f.fid
      WHERE n.nid IN (' . implode(', ', $nids) . ')');

    while ($result = db_fetch_object($results)) {
      $rows[$result->nid] = array();
      $rows[$result->nid]['nid'] = $result->nid;
      $rows[$result->nid]['title'] = check_plain($result->title);
      $rows[$result->nid]['body'] = check_plain($result->body);
      $rows[$result->nid]['filepath']= $result->filepath;
      
      if (strlen($rows[$result->nid]['body']) > 85) {
        $rows[$result->nid]['body'] = substr($rows[$result->nid]['body'], 0, 85) . '...';
      }
    }
    return $rows;
  }
}
