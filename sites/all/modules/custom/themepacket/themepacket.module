<?php
// $Id$

/**
 * @file
 * Automatically discovers theme functions and templates found within
 * the 'theme' folder of your modules/themes and automatically
 * generates the array of theme hooks returned in your hook_theme().
 *
 * Also registers any assets found within the same directory as your
 * theme implementation and includes them when the theme is in the
 * context of being rendered.
 */

 
/**
 * @todo create an example module to demonstrate how the module can
 * be used.
 *
 * @todo create hook_help() pages. Also, advanced_help().
 *
 * @todo create another module that contains a Views plugin that will
 * extend Page, Block, and Attachement displays to inherit
 * ThemePacket features.
 *
 * @todo replace drupal_add_* with a generic catch-all function that
 * will encapsulate future functionality.
 */

/**
 * Implementation of hook_menu().
 */
function themepacket_menu() {
  $items['admin/settings/themepacket'] = array(
    'title' => 'Theme Packet',
    'description' => 'Configure how themepackets will operate.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('themepacket_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'themepacket.admin.inc',
  );
  
  return $items;
}


/**
 * Implementation of hook_theme().
 */
function themepacket_theme($existing, $type, $theme, $path) {
  // Eating my own dog food.
  return themepacket_discover($existing, $type, $theme, $path);
}


function themepacket_preprocess_page(&$vars, $hook) {
  // Ensure that all assets have been saved to $vars up to this point. The site theme should also do this.
  $vars['scripts'] = drupal_get_js();
  $vars['styles'] = drupal_get_css();
}


/**
 * Implementation of hook_form_form_id_alter().
 */
function themepacket_form_views_ui_add_display_form_alter(&$form, $form_state) {
  $form['display']['display']['#default_value'] = 'packet';
}


/**
 * Implementation of hook_theme_registry_alter().
 */
function themepacket_theme_registry_alter(&$theme_registry) {
   // Views asset discovery
   if (module_exists('views')) {
       foreach (views_get_applicable_views('themepacket') as $view) {
         if ($view[0]->display_handler->options['include_assets']) {
           foreach ($view[0]->display_handler->compatible_templates() as $template) {
               if ($info = $theme_registry[$template]) {
                 $assets[$template] = _themepacket_build_assets($info, array('type' => 'views'));
                 break;
               }
           }
         }
       }
   }
   
   
   // General asset discovery + preprocessor
   foreach ($theme_registry as $key => $info) {
     if (isset($info['include assets'])) {
       array_unshift($theme_registry[$key]['preprocess functions'], '_themepacket_preprocess');
       $assets[$key] = _themepacket_build_assets($info, array('type' => 'discovered'));
     }
   }
   
   // Save registry
   global $theme;
   cache_set('asset_registry:'. $theme, $assets);
}


/**
 * Implementation of hook_views_api().
 */
function themepacket_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'themepacket') . '/views',
  );
}


/**
 * Auto discover theme implementations.
 * 
 * @see hook_theme().
 *  
 * @param $existing
 *  An array of existing implementations
 * 
 * @param $type
 *  What "type" is being processed.
 * 
 * @param $theme
 *  The actual name of theme that is being being checked.
 * 
 * @param $path
 *  The directory path of the theme or module, so that it doesn't need to be looked up.
 * 
 * @return
 *  an array of theme implementations
 * 
 *  @see hook_theme().
 */
function themepacket_discover($existing, $type, $theme, $path) {
  // Get theme path
  $theme_dir = ($theme == 'themepacket') ? 'theme' : variable_get('themepacket_theme_dir', 'theme');
  $hooks = array();
  
  // Scan for templates and include files.
  $theme_dir_ignore = explode(', ', variable_get('themepacket_theme_dir_ignore', 'views'));
  $ignore = $theme_dir_ignore += array('.', '..', 'CVS');
  $files = _themepacket_discover_theme($path . '/' . $theme_dir, $ignore);
  foreach ($files as $file => $info) {
    // Check if theme is overridding existing functions/templates so we can provide all the necessary overrides.
    if ($type == 'theme' && isset($existing[$file])) {
      $existing[$file]['include assets'] = TRUE;  // Enable includding assets
      $existing[$file]['override preprocess functions'] = TRUE; // Prevent duplicate preprocessors
      if (!isset($existing[$file]['template'])) {
        $existing[$file]['function'] = '_themepacket_preprocess_theme_function'; // Adding a preprocessor to a theme function
        $existing[$file]['real function'] = $theme . '_' . $file; // Assigning new function name
        unset($existing[$file]['include files']); // Preventing inclusion of old include files
      }
      
      $hooks[$file] = array_merge($existing[$file], $info);  // Merge basic info (path and file)
      continue;
    }

    $key = $theme .'_' . $file;
    
    if (!isset($info['template'])) {
      $hooks[$key]['function'] = '_themepacket_preprocess_theme_function';  // Adding a preprocessor to a theme function
      $hooks[$key]['real function'] = ($type == 'module') ? 'theme_'. $key : $theme . '_' . $key; // Assigning function name
    }
    else {
      $hooks[$key]['arguments'] = (isset($info['template'])) ? array('a1' => NULL, 'a2' => NULL, 'a3' => NULL, 'a4' => NULL, 'a5' => NULL) : array();
      /*@fixme templates require a number of parameters to exist, however proper variable names are important for the sake of readability. a1-a5 is stupid.*/
    }
    
    $hooks[$key]['include assets'] = TRUE;  // Enable includding assets
    $hooks[$key] += $info;  // Add basic info to hook.  
  }
  return $hooks;
}


/**
 * Recursive function to scan for templates and include files. This
 * function also builds basic info for hook_theme
 * 
 * @param $dir
 *  The directory to begin scanning.
 * 
 * @param $skip
 *  File names to not include in the recursive search.
 * 
 */
function _themepacket_discover_theme($dir, $skip = array('.', '..', 'CVS')) {
  $hooks = array();

  if (is_dir($dir) && $handle = opendir($dir)) {
    while (FALSE !== ($file = readdir($handle))) {
      if (!in_array($file, $skip) && $file[0] != '.') {
        if (is_dir("$dir/$file")) {
          $hooks = array_merge(_themepacket_discover_theme("$dir/$file", $skip), $hooks);
        }
        elseif (preg_match('/^([a-zA-z_])+([a-zA-z0-9\-])+(.inc|.tpl.php)$/', $file)) {
          $basename = basename($file);
          $name = substr($basename, 0, strpos($basename, '.'));
          $type = 'file';
          if (preg_match('/(.tpl.php)$/', $basename)) {
            $type = 'template';
            $basename = $name;
          }
          
          // Replace hyphens with underscores for valid hook names
          $name = str_replace('-', '_', $name);
          
          // Basic hook info
          $hooks[$name]['path'] = $dir;
          $hooks[$name][$type] = $basename;
        }
      }
    }
    closedir($handle);
  }
  return $hooks;
}


/**
 * Wrapper function to find theme hook patterns while also enabling
 * asset registration.
 * 
 * @param $hooks
 *  A copy of the current theme registry
 * 
 * @param $extension
 *  The file extension of the patterns. This will almost always be
 *  '.tpl.php'.
 * 
 * @param $path
 *  The path to the current hook_theme implementation.
 * 
 * @return
 *  An array of fully-built theme hooks of matching patterns found.
 */
function themepacket_find_patterns($hooks = NULL, $extension = '.tpl.php', $path = '') {
  if (!empty($hooks)  && !empty($path)) {
    $patterns = drupal_find_theme_templates($hooks, $extension, $path);
    foreach (array_keys($patterns) as $name) {
      $patterns[$name]['include assets'] = TRUE;
    }
    return $patterns;
  }
}

/**
 * Preprocesses theme functions to perform operations before
 * backtracing and executing the real theme function.
 * 
 * @return
 *  the rendered output of the real theme function.
 */
function _themepacket_preprocess_theme_function() {
  $args = func_get_args();
  $trace = debug_backtrace();
  foreach ($trace as $footprint) {
    if ($footprint['function'] == 'theme') {
      $hook = $footprint['args'][0];
      
      // Preprocess
      $vars = array();
      _themepacket_preprocess($vars, $hook);
      
      // Execute theme function
      $registry = theme_get_registry();
      return call_user_func_array($registry[$hook]['real function'], $args);
    }
  }
}

/**
 * Custom preprocessor used by both templates and theme functions.
 */
function _themepacket_preprocess(&$vars, $hook) {
  $assets = assets_get_registry();
  if (!empty($assets->data) && isset($assets->data[$hook])) {
    
    $item = $assets->data[$hook];
    if (!empty($item['js'])) {
      foreach ($item['js'] as $js) {
        drupal_add_js($js->filename);
      }
    }
    
    if (!empty($item['css'])) {
      foreach ($item['css'] as $css) {
        drupal_add_css($css->filename);
      }
    }
    
  }
}


/**
 * Scan a directory to discover css and javascript files.
 * 
 * @param $path
 *   The path that will be scanned.
 * 
 * @return
 *   An array of assets found.
 */
function themepacket_discover_assets($path = '') {
  if (!empty($path)) {
    $assets = array('js' => array(), 'css' => array());
    
    foreach (file_scan_directory($path, '[0-9A-Za-z.\-_]+(.js|.css)$') as $file) {
      //seperate js and css files
      foreach (array('js', 'css') as $ext) {
        if (preg_match('/.' . $ext . '$/', $file->basename)) {
          
          /**
           * Symbolic links are added to the beginning of
           * the array since they are usually dependencies.
           * @fixme multiple symlink files are added to the array in
           * the reverse order that the filesystem stores its files.
           * @see http://us.php.net/readdir
           */
          if (_themepacket_symlink_info($file)) {
            array_unshift($assets[$ext], $file);
          }
          elseif ($file) {
            $assets[$ext][] = $file;
          }
        }
      }
    }
   return $assets; 
  }
}


/**
 * Builds a single asset registry component.
 * 
 * @param $info
 *   An array of information from a theme hook.
 * 
 * @param $options
 *   An array of extra parameters
 *   - "type": The type of asset registry component.
 * 
 * @return An array representation of fully built asset registry component.
 */
function _themepacket_build_assets($info, $options = array()) {
  $assets = array();
  
  // Build basic info
  $assets['base path'] = $info['path'];
  $assets['type'] = (isset($options['type'])) ? $options['type'] : 'discovered';
  
  // Build asset files
  $files = themepacket_discover_assets($info['path']);
  $assets['js'] = $files['js'];
  $assets['css'] = $files['css'];
  
  return $assets;
}


/**
 * Determines if file is a symbolic link. If symbolic link, the file
 * object is modified to contain reference to the original file and
 * also track the location of the alias.
 * 
 * @see file_scan_directory().
 * 
 * @param $file
 *   A file object.
 * 
 * @return
 *   Returns false if file is not a symbolic link. returns true
 *   if symbolic link target exists, otherwise the file object is
 *   destroyed.
 */
function _themepacket_symlink_info(&$file = NULL) {
  if ($file) {
    if (isset($file->filename) && !is_link($file->filename)) {
      return;
    }
    
    // Parse out original filename from symlink content and send it to asset registry.
    $orig = variable_get('themepacket_library_path', 'sites/all/libraries') .'/'. end(explode('/', readlink($file->filename)));
    if (file_exists($orig)) {
      $file->alias = $file->filename;
      $file->filename = $orig;
      return TRUE;
    }
    else {
      // Original file does not exist, prevent it from trying to add itself to the asset registry.
      drupal_set_message(t('Alias @alias references the file @orig which does not exist.', array('@alias' => $file->filename, '@orig' => $orig)), 'warning');
      $file = NULL;
    }
  }
}


/**
 * Retrive the assets registry and store it in static variable.
 */
function assets_get_registry($theme = NULL) {
  if (empty($theme)) {
    global $theme;
  }
  
  static $assets;
  $assets = NULL;
  if (!isset($assets)) {
    $assets = cache_get('asset_registry:'. $theme);
  }
  return $assets;
}


/**
 * Wrapper function to add assets.
 * 
 * @param $file
 *  The full path to the file to be included.
 * 
 * @param $type
 *  The type of file to add.
 * 
 * @param $options
 *  An array of options to pass to drupal_add_*.
 * 
 * @return
 *  An array of already added assets of its type.
 */

function add_asset($file = '', $type = NULL, $options = array()) {
  if (!$type) {
    // do some regex to detect filetype
  }
  
  switch ($type) {
    case 'css':
      $options += array(
        'type' => 'module',
        'media' => 'all',
        'preprocess' => TRUE,
        );
      $return = drupal_add_css($file, $options['type'], $options['media'], $options['preprocess']);
      break;
    
    case 'js':
      $options += array(
        'type' => 'module',
        'scope' => 'footer', 
        'defer' => FALSE,
        'cache' => 'TRUE',
        'preprocess' => TRUE,
        );
      $return = drupal_add_js($file, $options['type'], $options['scope'], $options['defer'], 'cache', $options['preprocess']);
  }
  
  return $return;
}
